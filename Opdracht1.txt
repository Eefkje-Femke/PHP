VERSCHIL TUSSEN EEN OBJECT EN EEN KLASSE

Een klasse is een soort van blauwdruk. Je kan met behulp van een klasse de dingen (objecten) in groepen sorteren. 
Een object is dan eigenlijk een eigenschap.

public class Song
{
  public String songTitle;

  public void setTitle(String newTitle)
  {
    songTitle = newTitle;
  }

  public String getTitle()
  {
    return songTitle;
  }

} // Song{}

Hier kan je een stukje code zien. Er is een klasse gemaakt met de naam 'Song'. 
Een eigenschap (object) van de klasse 'Song' is de titel van het liedje.

Dat is het verschil tussen een object en een klasse.


PRIVATE, PUBLIC EN PROTECTED

Public = iedereen kan de properties veranderen of methods uit te voeren. 
Private = Je schermt de properties en de methodes af van de buitenwereld. 
	Je kan alleen vanuit de klasse de properties veranderen of methodes aanroepen
Protected = de properties zijn niet afgeschermd voor de huidige klasse en alle child klasses.


UITLEG HTML TABEL!!!
Ze maken 3 klasses: table, row en cell. 
Content is een eigenschap van een cell.
Cell is een eigenschap van een row.
Row is een eigenschap van een table.

class Table {
    private $_rows;
    
}

class Row {
    private $_cells;

}

class Cell {
    private $_content;

}

de draw() functie gaat daadwerkelijk de tabel "tekenen" met HTML elementen
Eigenlijk maak je maar 1 tabel en daarin heb je zoveel rijen en in die rijen heb je dan zoveel cellen.


CONSTRUCTOR MOET ALTIJD PUBLIC ZIJN
Een constructor moet altijd public zijn omdat 
een constructor altijd automatisch uitgevoerd wordt. 
Als je constructor private staat wordt de constructor afgeschermd van de buitenwereld. 
Dus als je iets wilt meegeven is dat niet mogelijk.

EXTENDS
Natuurkunde docent extends docent
kind extends ouder
huis extends muur 
INCORRECT
schoen extends veters

opdracht 11
One rule-of-thumb: ask yourself "does it make sense to call this method, even if no Obj has been constructed yet?" 
If so, it should definitely be static.


